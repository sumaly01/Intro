# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AdminLoginResponse {
  access_token: String!
  admin: CreateAdminDto!
}

type CreateAdminDto {
  _id: ID!
  email: String!
}

input CreateAdminInput {
  email: String!
  password: String!
}

input CreateGenderInput {
  genderName: String!
  order: Float!
  slugName: GenderSlug!
}

type CreateGenderResponse {
  _id: ID!
  genderName: String!
  isDeleted: Boolean!
  order: Float!
  slugName: GenderSlug!
}

input CreateIntroInput {
  fileName: String!
}

type CreateIntroResponse {
  createdBy: CreateUserResponse!
  currentIntro: Boolean!
  filePath: String!
}

input CreateUserInput {
  birthday: Date!
  email: String!
  gender: String!
  interestedIn: InterestedGender!
  interests: [Interests!]!
  name: String!
}

type CreateUserResponse {
  _id: ID!
  gender: UserDetailGenderResponse!
  interestedIn: InterestedGender!
  name: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DeleteGenderInput {
  _id: ID!
}

input ForgetPasswordInput {
  email: String!
}

type ForgetPasswordResponse {
  mailSend: Boolean!
  token: String!
}

type Gender {
  genderName: String!
  isDeleted: Boolean!
  order: Float!
  slugName: String!
}

enum GenderSlug {
  BISEXUAL
  GAY
  LESBIAN
  MEN
  TRANS
  WOMEN
}

enum InterestedGender {
  BISEXUAL
  EVERYONE
  GAY
  LESBIAN
  MEN
  TRANS
  WOMEN
}

enum Interests {
  COOK
  CYCLING
  DANCE
  HIKE
  MUSIC
  READ_BOOKS
  SING
  SKETCH
  TRAVEL
}

input LoginAdminInput {
  email: String!
  password: String!
}

type Mutation {
  ForgetPassword(ForgetPasswordInput: ForgetPasswordInput!): ForgetPasswordResponse!
  ResetPassword(resetPasswordInput: ResetPasswordInput!): ResetPasswordResponse!
  createAdmin(createAdminInput: CreateAdminInput!): CreateAdminDto!
  createGender(createGenderInput: CreateGenderInput!): CreateGenderResponse!
  createIntro(createIntro: CreateIntroInput!): CreateIntroResponse!
  createOtp(phoneInput: PhoneInput!): OtpUserResponse!
  createUser(createUserInput: CreateUserInput!): CreateUserResponse!
  listMyIntro: [CreateIntroResponse!]!
  login(loginAdminInput: LoginAdminInput!): AdminLoginResponse!
  removeGender(id: DeleteGenderInput!): CreateGenderResponse!
  searchGendersBySlug(searchGenders: SearchGenderSlugInput!): [CreateUserResponse!]!
  updateGender(updateGenderInput: UpdateGenderInput!): CreateGenderResponse!
  verifyOtp(otpInput: OtpInput!): OtpVerifyResponse!
  viewIntroFeed: [CreateIntroResponse!]!
}

input OtpInput {
  otp: Float!
  phone_number: Float!
}

type OtpUserResponse {
  _id: ID!
  newUser: Boolean!
  otp: Float!
  phone_number: Float!
}

type OtpVerifyResponse {
  _id: ID!
  access_token: String!
}

input PhoneInput {
  phone_number: Float!
}

type Query {
  AdminProfile: CreateAdminDto!
  findAll: [CreateAdminDto!]!
  findGenderById(id: String!): CreateGenderResponse!
  findGenders: [CreateGenderResponse!]!
  listUser: [CreateUserResponse!]!
}

input ResetPasswordInput {
  confirmPassword: String!
  password: String!
}

type ResetPasswordResponse {
  resetPassword: Boolean!
}

input SearchGenderSlugInput {
  slugName: GenderSlug!
}

input UpdateGenderInput {
  _id: ID!
  genderName: String
  order: Float
  slugName: GenderSlug
}

type User {
  access_token: String!
  birthday: Date!
  email: String!
  expiry_time: Date!
  gender: Gender!
  interestedIn: String!
  name: String!
  newUser: Boolean!
  otp: Float!
  phone_number: Float!
  verifyOtp: Boolean!
}

type UserDetailGenderResponse {
  _id: ID!
  genderName: String!
}
